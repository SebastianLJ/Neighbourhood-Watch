{
    "navigation": {
        "hardware": "Hardware Setup",
        "devices": "Devices",
        "ttnSetup": "The Things Network",
        "raspiSetup": "Raspberry Pi",
        "software": "Software Setup",
        "server": "Server Connection",
        "database": "Database Setup",
        "integration": "Hardware Integration"
    },
    "intro": {
        "title": "Server",
        "version": "The material in this guide is based on the latest version of the system: ",
        "latest": "latest",
        "devices": "The server consist of a <1>Raspberry Pi</1> and a <3>TTN Gateway</3>. The gateway handles the communication back and forward with all the connected devices (<5>visit the alarms section for more info</5>), and the server interprets this passed information. In case of a break in or if a device malfunctions, the server notifices either the entire neighborhood or specific individuals by SMS - depending on the issue.",
        "diagram": "The diagram below shows the general communication flow between the different devices in the overall system, where the TTN cloud and the NWA server house represents what will be referred to as just the server.",
        "server": {
            "description": "To setup your own running server you must first acquire and set up the necessary hardware. Follow the button below for instructions regarding this hardware and their usage. Note that NWA always encourage you to follow the recommended options, unless you are absolutely sure about what you are doing. These guides do not cover alternative methods thoroughly.",
            "link": "Hardware Setup"
        },
        "hardware": {
            "description": "If you have already set up the hardware properply, you're ready to install the necessary software. Follow the button below for instructions on how to setup this software.",
            "link": "Software Setup"
        },
        "tooltips": {
            "raspPi": "Single board computer",
            "ttn": "Bridge between LoRaWAN devices and The Things Network's online services"
        }
    },
    "devices": {
        "title": "Devices",
        "intro": "The items below represents all the necesarry hardware to get the system up and running. Before moving on to thesetup section, make sure you have acquired all items!",
        "ttnTitle": "TTN Gateway",
        "ttnSection": "To recieve the <1>LoRaWAN</1> signals from the connected alarm systems within the neighborhood, you need a TTN gateway. This can be bought from <3>here</3>.",
        "rasTitle": "Raspberry Pi",
        "rasSection": "You need a simple computer to act as a server that interacts with the information passing through The Things Network. NWA recommends Raspberry Pi 3 B+, as this is the device that the system was developed with, but newer versions should work as well. To power up the Raspberry Pi, you also need a Micro USB cable that can connect to a power outlet. The Raspberry Pi can be bought from <1>here</1>.",
        "sdTitle": "Micro SD Card",
        "sdSection": "As the Raspberry Pi doesn't ship with memory, you need to acquire a compatible Micro SD card. It is a requirement that it has a minimum of 3gb available. You also need a computer that can read Micro SD cards directly or a dongle that enables this functionality. An appropiate memory card can be bought from <1>here</1>.",
        "simIntro": "Huawei Modem + SIM card",
        "simSection": "For the SMS functionality to work, you need an activated SIM card with message sending capabilities. As SIM cards can't be directly inserted into a Raspberry Pi - or barely any computer for that matter - you need a wireless USB modem. NWA recommends the HUAWEI E3372H modem, as this is the device that the system was developed with. Note that different modems might require software alterrations. The HUAWEI modem can be bought from <1>here</1>.",
        "next": "Next: TTN Setup"
    },
    "ttn": {
        "title": "The Things Network Setup",
        "intro": "In this section it will be explained how to setup your Gateway properly, followed by instructions on how to configure the NWA application.",
        "gateway": {
            "title": "Gateway Setup",
            "intro": "First you need to assemble your Gateway like explained in the manual. The process i straight forward, as you only need to connect the antenna by screwing it on at the front. After this is done, connect the device to a power outlet using the supplied cable.",
            "activate": "To activate the gateway head to <1>https://activate.thethingsnetwork.org/</1>. You need to register an account if you don't have one already. When logged in, press the button \"Let's Get Started!\". From here, you will be guided through the following four steps:",
            "1": "Choosing a uniquie ID for the gateway and a frequency plan (make sure to pick the area you're located in).",
            "2": "Connect to the Gateway as a WiFi Router through your computer's internet settings. Use \"thethings\" as the promted password.",
            "3": "Choose wether you want the Gateway to connect to the internet through WiFi or LAN, and set it up accordingly to your preference.",
            "4": "Wait for the Gateway to succesfully connect. Once this is done, follow the link to the <1>Console Application Site</1> presented. In case of problems, use the LED lights on the Gateway to troubleshoot.",
            "tooltip4": "TTN Graphical User Interface app to monitor and manipulate exchange of data",
            "videoIntro": "In the video below TTN guides you through how to setup your Gateway with The Things Network step by step as decribed above.",
            "videoLicense": "The video is embedded as a link to TTN's own Youtube channel and used under Youtube's fair use policy."
        },
        "app": {
            "title": "Application Setup",
            "intro": "After succesfully connecting the Gateway to TTN and following the link to <1>https://console.thethingsnetwork.org/applications</1>, press \"add application\" to create the NWA app. Choose a new uniquie ID, a suitable description and an appropiate handler. If you live in Europe, we recommend the \"ttn-handler-eu\". After this is done, proceed to the application and scroll down to the bottom. Copy the acces key \"default key\" (should be the only one) in base64 format and save it for later. You will need it when you prepare the <3>software</3>.",
            "devices": {
                "title": "Adding devices",
                "intro": "This step can be done now or later, but it needs to be done with every ordered device within the neighborhood. Before a device has been added to the application, the server will not be able to commuicate with it! This is therefore an ongoing process, where the person in charge of the server will continuously need to add devices as neighbors order more alarm components.",
                "add": "To add a device press \"register device\" in the \"Devices\" tab. Proceed to yet aggain appoint a unique ID and select auto generation of EUI and App key. Then register the device.",
                "method": "After adding a device click on it and head to the settings section. Change OTAA to ABP under ”Activation Method”, and select 16 instead of 32 bit under ”Frame Counter Width”. Now TTN should be ready to handle the information regarding this device. Make sure the device is set up as explained in the <1>database guide</1>."
            }
        },
        "next": "Next: Raspberry Pi Setup"
    },
    "os": {
        "title": "Raspberry Pi Setup",
        "intro": "This section covers descriptions on how to prepare and install the necesarry system files to get Raspberry Pi OS up and running and how to interact with the Raspberry Pi. The process of setting up the WiFi modem and activating the SIM Card will also be explained.",
        "os": {
            "title": "Raspberry Pi OS / Raspbian",
            "intro": "The first step in the process after acquiring all the necesarry hardware is to download <1>Raspberry Pi Imager</1> from <3> https://www.raspberrypi.org/downloads/</3>.",
            "imager": "When starting up the program, you should be met with a layout pretty similar to the one shown below. Make sure the Micro SD card is connected to your computer. Choose Raspberry Pi OS (former RASPBIAN) as the operating system and the inserted memory card as the SD card. Then proceed to press \"write\".",
            "tooltip": "Program that installs the Raspberry Pi operating system on an SD card"
        },
        "remote": {
            "title": "Remote Control Setup",
            "recommended": "recommended",
            "internet": {
                "title": "Internet Acces",
                "intro": "The Raspberry Pi connects to the internet automatically through a LAN-cable. If you wish to use WiFi, you must first enable this. After the OS flashing described in the previous section is done, create the file <1>wpa-supplicant.conf</1> inside the \"boot\" folder on the SD Card (do not create a \"boot\" folder, as \"boot\" should be the first entry on the SD card. The file <3>kernel7.img</3> should be present in the correct destination):",
                "file": "Paste the following content to the file, but make sure to change the countrycode and WiFi credentials to your personal details:",
                "ready": "The Micro SD Card is now ready. Insert it into the Raspberry Pi, and proceed to plug in the USB cable. It should power on automatically."
            },
            "ssh": {
                "title": "SSH Configuration",
                "intro": "NWA recommends to use <1>SSH</1> for remote control of the Raspberry Pi. To enable this, create an empty file <3>ssh</3> at the same location as before. Do not put anything inside this file, and do not give it <5>file extension</5>:",
                "system": "Both MacOS and Windows supports SSH nowadays, but on Windows some features are still limited. To ease up the process, NWA recommend that both users use the SSH client PuTTY. The program can be downloaded from <1>https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html</1>.",
                "putty": "When Launcing the program, you should be presented with an interface similar to image below. Put in \"raspberrypi\" as the host name and proceed to click \"Open\".",
                "terminal": "A terminal window should open up prompting for credentials. Enter \"pi\" as login and \"raspberry\" as the password like so:",
                "password": "You should now succesfully be connected to the Raspberry Pi's terminal. To make sure no one else can connect to it, change the password by typing in the command below. Proceed to type in your new password and repeat it one more time. Make sure you remember this password, as you will otherwise have to repeat all the steps in this guide.",
                "tooltip": "Do not change the name to ssh.txt, ssh.js and so on. Leave it blank."
            },
            "java": {
                "title": "Java Installation",
                "intro": "As the server program is written in Java you need to install the Java Development Kit. This is done by running the following commands in the PuTTY session while connected to the Raspberry Pi:",
                "check": "You can check to see if the install was succesfull by running the folowwing command:"
            },
            "SCP": {
                "title": "SCP",
                "intro": "While it is possible to transer files with PuTTY or SSH in general through different extensions, NWA recommends to use <1>SCP</1> for this. This is important as You will need to trasfer server files in the <3> hardware integration </3> section later.",
                "system": "On MacOS and Linux SCP is natively supported. Therefore, you only need to type in the command below from the command line on your own computer(filepath_local is the absolute path to the file on the local system, filepath_remote is the absolute path on the Raspberry Pi to where you want the file to be stored, and ip_address is the ip address of the Raspberry Pi):",
                "adress": "To find the ip address of the Raspberry Pi, simply type in the following command in the Rasperry Pi's terminal, while being connected through PuTTY:",
                "winSCP": "As Windows doesn't support SCP out of the box, you will need a program for this. NWA recommends WinSCP, as it is super simple to drag-n-drop files. You can donwload the program from <1>https://winscp.net/eng/download.php</1>.",
                "gui": "The user interface is very similar to PuTTY. Just pass in the credentials as shown below alongside your personal password and you will be good to go.",
                "tooltip": "Secure Copy Protocol: Transfer files between local and remote host"
            }
        },
        "desktop": {
            "title": "Desktop Setup",
            "alternative": "alternative",
            "intro": "If the SIM card has sufficient 3G/4G capabilities, the USB modem can be used for both cellular service and internet connection. However, this means that remote control is not an option right away, as the Raspberry Pi no longer shares the same internet",
            "setup": "Therefore, the Raspberry Pi will need to be run as a desktop setup including screen, mouse and keyboard. The screen needs wo be connected with an hdmi cable, and the mouse and keyboard need to connected through wired USB cables at first, as bluetooth isn't enabled by dafault. The file transfering described in <1>hardware integration</1> will also need to be done using a regular USB drive. Note that Raspberry Pi OS doesn't support file exchange out of the box like Windows and MacOS does, as USB drives need to mounted and unmounted before use. More information regarding this matter can be found at Raspberry's <3>documentation</3>.",
            "otherwise": "Otherwise the setup looks pretty much like the one described above."
        },
        "celService": {
            "title": "Cellular Service",
            "section": "To setup the Huawei USB Modem, simply pop off the back of the modem, insert the SIM card at the top (keep it in the big container), and plug it into your computer. Make sure the SIM card is activated beforehand. You should now automatically be directed to <1>http://192.168.8.1/</1>. If not, follow this link. From here enter the SIM Card's PIN code, and everything should be up and running shortly after. Once a connection is succesfully established, remove the USB modem from your computer and plug it into the Raspberry Pi. Remember the number of the SIM Card, as this is the number every household will get messages from."
        },
        "next": "Next: Software Connection"
    },
    "connection": {
        "title": "Server Connection",
        "downTitle": "Download of alarm system",
        "downSec": "You need to download the alarm system files at <1>https://github.com/neighborhood-watch-alarm/nwa</1>. Click \"Clone or download\" -> \"Download ZIP\". Once this has downloaded, unzip the folder and place it where you like.",
        "java": {
            "title": "Java IDE",
            "intro": "To manipulate and compile the server files NWA recommends to use an <1>IDE</1> optimized for <3>Java</3> development - particularly Eclipse. Eclipse can be downloaded from <5>https://www.eclipse.org/downloads/</5>.",
            "install": "If you do not already have Java installed, you need to download it from <1>https://www.java.com/en/download/</1>. In Eclipse, perform the following actions:",
            "eclipse": "From here, make sure you check off all the files, then proceed to import it. Name it \"server\". The popup window should look something like this:",
            "tooltipIDE": "Integrated Development Environment",
            "tooltipJava": "Object oriented programming language"
        },
        "ttn": {
            "title": "TTN Connection",
            "intro": "After the project has been imported, expand it and open the file <1>MSGRecver.java</1> at:",
            "strings": "You need to edit the three strings region (i.e. \"eu\"), appID(the chosen name of the TTN app) and appAccessKey(the one you were told to save for later):",
            "check": "To make sure you have done the steps correctly, give it a trial run by right clicking on the imported project and perform the actions below.",
            "output": "This should cause the Console to print out \"<1>connected to the backend...</1>\". Make sure you close it down again."
        },
        "next": "Next: Database Setup"
    },
    "database": {
        "title": "Database Setup",
        "update": {
            "title": "Update Houses",
            "intro": "To edit or update the database, open the file <1>SetupExample.java</1> at:",
            "scroll": "Scroll down to the fields similar to the ones below. Every house in the neighborhood that is part of the system needs to be defined like this - with a salt, HoueID, house, devices and a phone number. The salt is a unique array of hexadecimals used to identify houses. Each hexadecimal can have practically any value folloing the conventions, but make sure to leave the last two unused (0x00). If a house has more or less devices, simply add or remove similar lines. The identifiers needs to be unique (otherwise Java will complain as well).",
            "remember": "Make sure you remember to add the devices to the arrays \"houseDB\", \"deviceDB\" and \"phoneAddrDB\" like shown above!"
        },
        "implement": {
            "title": "Implement Updates",
            "intro": "To run database updates like described above, you need to run the file <1>Main_Method.java</1> at:",
            "scroll": "Scroll down to the method similar to the one shown below and make sure to <1>uncomment</1> the line <3>SetupExample.testing(args)</3>.",
            "run": "Then proceed to run the application as described in the <1>server connection</1> section. The databases should now be updated. Remember to comment the line out again.",
            "tooltip": "remove the two slashes"
        },
        "next": "Next: Hardware Integration"
    },
    "integration": {
        "title": "Hardware Integration",
        "intro": "All the pieces from the previous guides will in this section be put together. Make sure you have completed all the steps described so far!",
        "jar": {
            "title": "JAR file",
            "intro": "To run the server program as an application you need to compile it into a runnable <1>JAR-file</1>. To do so perfom the following steps in Eclipse:",
            "tooltip": "Java ARchive: Packed file featuring all necessary class files, metadata and resources.",
            "export": "Press next and then make sure that the \"Launch Configuration\" is set to the \"Main_Method\". Choose an export destination and click finish."
        },
        "file": {
            "title": "File Transfer",
            "intro": "Once the JAR file has been succesfully compiled, proceed to transfer it using SCP as described in the <1>raspberry pi setup</1> section alongside the files \"send_sms.sh\", \"database_component.txt\", \"database_house.txt\", \"database_phone.txt\" located in the root server folder. The files can be placed anywhere, but NWA recommends \"Desktop\" for convinience. Remember to retransfer the database files every time they are updated!",
            "move": "Proceed to connect to the Raspberry Pi with PuTTY - also described in the raspberry pi section. Move to the destination of the files. If you have placed the files at Desktop, simply type in the command:",
            "acces": "To grant acces to the bash file <1>send_sms.sh</1> - which is necessary for the SMS capabilities - type in the command:",
            "check": "You can check if the SMS capabilities work by directly running the bash script with the following command:",
            "result": "If set up properly, you should recieve an SMS text shortly after with the given content."
        },
        "server": {
            "title": "Run Server",
            "run": "Run the JAR file with the command below. If everything works, you should again be promted with the message \"<1>connected to the backend...</1>\"."
        },
        "next": "Done! Head back to main server page"
    }
}